name: CI
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    - feature/*
    - features/*

env:
  CARGO_TERM_COLOR: always
  QIRLIB_DOWNLOAD_LLVM: false
  CCACHE_DIR: ~/.ccache
  SCCACHE_DIR: C:\sccache

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    env: ${{ matrix.config.env }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              target: "checks",
              env: {},
            }
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              target: "musllinux",
              env: {},
            }
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              target: "manylinux",
              env: {},
            }
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              target: "default",
              env: {},
            }
          - {
              os: "windows-2019",
              arch: "amd64",
              target: "default",
              env: {},
            }
          - {
              os: "macos-11",
              arch: "amd64",
              target: "default",
              env: {},
            }
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Linux - Install build dependencies, ccache, ninja
        run: sudo apt-get install -y ccache ninja-build
        if: ${{ matrix.config.os == 'ubuntu-20.04' }}
      - name: Windows - Install build dependencies, sccache, ninja
        run: choco install --accept-license -y sccache ninja
        if: ${{ matrix.config.os == 'windows-2019' }}
      - name: MacOS - Install build dependencies, ccache, ninja
        run: brew install ccache ninja
        if: ${{ matrix.config.os == 'macos-11' }}
      - name: Windows - Install LLVM 11.1.0
        run: choco install llvm --version=11.1.0 --allow-downgrade
        if: ${{ matrix.config.os == 'windows-2019' }}
      - name: Get Timestamp
        id: timestamp
        run: Write-Host "::set-output name=timestamp::$([DateTime]::UtcNow.ToString('o'))"
        shell: pwsh
      - name: CCACHE cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CCACHE_DIR }}
          key: ${{ matrix.config.os }}-${{ matrix.config.target }}-ccache-${{ steps.timestamp.outputs.timestamp }}
          restore-keys: |
              ${{ matrix.config.os }}-${{ matrix.config.target }}-ccache-
        if: ${{ matrix.config.os != 'windows-2019' }}
      - name: SCCACHE cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.SCCACHE_DIR }}
          key: ${{ matrix.config.os }}-sccache-${{ steps.timestamp.outputs.timestamp }}
          restore-keys: |
              ${{ matrix.config.os }}-sccache-
        if: ${{ matrix.config.os == 'windows-2019' }}
      - name: "Build ${{ matrix.config.target }}"
        run: ./build.ps1 -t ${{ matrix.config.target }}
        shell: pwsh
      - name: Artifacts - manylinux
        uses: actions/upload-artifact@v2
        with:
          name: manylinux-artifacts
          path: |
            target/wheels/*manylinux_2_17*.whl
            target/wheels/pyqir-*.whl
        if: ${{ matrix.config.os == 'ubuntu-20.04' }}
      - name: Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.os }}-artifacts
          path: target/wheels/*
        if: ${{ matrix.config.os != 'ubuntu-20.04' }}
  docs:
    runs-on: "ubuntu-20.04"
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: manylinux-artifacts
          path: target/wheels

      - name: Build Docs
        run: ./build.ps1 -t docs
        shell: pwsh
      # Always publish docs as an artifact, but only publish docs to GitHub Pages
      # when pushing to main.
      - name: Publish Docs as Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/_build

      - name: Publish Docs to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          branch: gh-pages
          folder: docs/_build/html
        if: ${{ github.event_name == 'push' }}
