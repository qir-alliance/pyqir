Search.setIndex({"docnames": ["api/evaluator", "api/index", "api/pyqir", "building", "index", "upgrade"], "filenames": ["api/evaluator.md", "api/index.md", "api/pyqir.md", "building.md", "index.md", "upgrade.md"], "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">pyqir.evaluator</span></code>", "API Reference", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pyqir</span></code>", "Building from Source", "PyQIR", "Upgrading to PyQIR 0.7"], "terms": {"class": [0, 2, 5], "gatelogg": [0, 1], "base": [0, 2, 5], "gateset": [0, 1], "record": 0, "quantum": [0, 2, 4], "circuit": 0, "oper": [0, 2], "execut": 0, "dure": 0, "qir": [0, 2, 4, 5], "cx": [0, 2], "control": [0, 2, 5], "str": [0, 2, 5], "target": [0, 2, 3], "none": [0, 2, 5], "cz": [0, 2], "finish": 0, "metadata": 0, "dict": 0, "ani": [0, 3, 5], "call": [0, 1, 2, 5], "end": [0, 2], "suppli": 0, "run": [0, 3, 4, 5], "h": [0, 2], "instruct": [0, 1, 2], "list": [0, 2, 5], "m": [0, 3, 5], "qubit": [0, 1, 2], "mz": [0, 2], "number_of_qubit": 0, "int": [0, 2, 5], "number_of_regist": 0, "print": 0, "reset": [0, 2], "rx": [0, 2], "theta": [0, 2], "float": [0, 2], "ry": [0, 2], "rz": [0, 2], "": [0, 2, 3], "s_adj": [0, 2], "t": [0, 2, 5], "t_adj": [0, 2], "x": [0, 2], "y": [0, 2, 3], "z": [0, 2], "object": [0, 2, 5], "defin": 0, "which": [0, 2, 3, 5], "mai": [0, 4], "regist": 0, "callback": 0, "nonadaptiveevalu": [0, 1], "The": [0, 2, 3, 5], "non": 0, "adapt": 0, "jit": 0, "program": [0, 2, 5], "without": [0, 2], "simul": 0, "state": [0, 2], "measur": [0, 2], "result": [0, 1, 2], "ar": [0, 2, 4, 5], "pre": 0, "determin": 0, "befor": [0, 2, 5], "start": [0, 2], "eval": 0, "file_path": 0, "entry_point": [0, 1, 2, 5], "option": [0, 2], "result_stream": 0, "bool": [0, 2, 5], "compil": [0, 2, 3], "deleg": 0, "gate": [0, 2], "set": [0, 2, 3], "stream": 0, "read": [0, 5], "order": [0, 3], "each": [0, 3], "pop": 0, "from": [0, 2, 4, 5], "begin": 0, "If": [0, 2, 3, 5], "out": 0, "return": [0, 2, 5], "zero": [0, 2], "right": [0, 2, 5], "now": [0, 5], "doe": 0, "have": [0, 5], "full": 0, "runtim": 0, "environ": 0, "can": [0, 3, 4, 5], "produc": 0, "gener": [0, 2, 3, 4], "cannot": 0, "us": [0, 2, 3, 4, 5], "extern": [0, 2, 5], "function": [0, 1, 2], "paramet": [0, 2], "file": [0, 2], "path": [0, 3], "exist": [0, 3, 4], "ll": 0, "bc": 0, "python": [0, 3, 4], "entri": [0, 2], "point": [0, 2], "name": [0, 2, 5], "requir": [0, 2, 5], "contain": [0, 3, 5], "multipl": [0, 2], "boolean": [0, 2], "valu": [0, 1, 2, 5], "repres": [0, 2], "qi": [0, 2], "pyqir": [1, 3], "arraytyp": [1, 2], "attribut": [1, 2], "basicblock": [1, 2], "basicqisbuild": [1, 2], "builder": [1, 2], "constant": [1, 2, 5], "context": [1, 2, 5], "fcmp": [1, 2, 5], "floatconst": [1, 2], "floatpred": [1, 2], "functiontyp": [1, 2, 5], "icmp": [1, 2, 5], "intconst": [1, 2], "intpred": [1, 2], "inttyp": [1, 2, 5], "linkag": [1, 2], "modul": [1, 2, 3, 4], "opcod": [1, 2, 5], "phi": [1, 2, 5], "pointertyp": [1, 2], "simplemodul": [1, 2, 5], "structtyp": [1, 2], "switch": [1, 2, 5], "type": [1, 2], "const": [1, 2], "extract_byte_str": [1, 2, 5], "global_byte_str": [1, 2], "is_entry_point": [1, 2, 5], "is_interop_friendli": [1, 2, 5], "is_qubit_typ": [1, 2], "is_result_typ": [1, 2], "qubit_id": [1, 2, 5], "qubit_typ": [1, 2, 5], "required_num_qubit": [1, 2], "required_num_result": [1, 2], "result_id": [1, 2, 5], "result_typ": [1, 2, 5], "evalu": [1, 4, 5], "an": [2, 3, 5], "arrai": 2, "count": 2, "number": 2, "element": 2, "string": 2, "A": 2, "basic": [2, 5], "block": [2, 5], "i": [2, 3, 5], "given": 2, "thi": [2, 3, 5], "insert": 2, "directli": [2, 3, 5], "parent": 2, "must": [2, 3], "append": 2, "global": [2, 5], "termin": [2, 5], "one": [2, 3, 5], "underli": 2, "build": [2, 4], "pauli": 2, "hadamard": 2, "if_result": 2, "cond": 2, "branch": 2, "condit": 2, "when": 2, "callabl": 2, "should": [2, 3, 5], "where": 2, "basi": 2, "written": 2, "rotat": 2, "about": 2, "axi": 2, "union": 2, "angl": 2, "adjoint": 2, "add": 2, "lh": 2, "rh": 2, "addit": 2, "left": 2, "hand": 2, "side": 2, "sum": 2, "and_": 2, "bitwis": 2, "logic": 2, "br": [2, 5], "uncondit": 2, "dest": 2, "destin": 2, "calle": 2, "arg": [2, 3], "sequenc": 2, "argument": 2, "ha": [2, 3, 5], "void": [2, 5], "pred": 2, "integ": 2, "comparison": 2, "predic": 2, "compar": [2, 5], "if_": 2, "true": 2, "fals": 2, "insert_at_end": 2, "tell": 2, "subsequ": 2, "lshr": 2, "fill": 2, "shift": 2, "bit": [2, 4], "mul": 2, "product": 2, "or_": 2, "ret": [2, 5], "shl": 2, "sub": 2, "subtract": 2, "differ": [2, 5], "xor": 2, "exclus": 2, "being": 2, "is_nul": 2, "whether": 2, "null": 2, "its": [2, 3, 5], "static": [2, 5], "ty": 2, "creat": [2, 5], "own": 2, "need": [2, 4, 5], "most": [2, 4, 5], "llvm": [2, 5], "oeq": 2, "og": 2, "ogt": 2, "ol": 2, "olt": 2, "ONE": 2, "ord": 2, "ueq": 2, "ug": 2, "ugt": 2, "ul": 2, "ult": 2, "un": 2, "uno": 2, "kind": [2, 5], "get": [2, 3, 5], "basic_block": 2, "param": [2, 5], "eras": 2, "remov": [2, 5], "delet": 2, "memori": 2, "after": [2, 3, 5], "undefin": 2, "behavior": [2, 3], "operand": [2, 5], "successor": [2, 5], "empti": 2, "eq": 2, "ne": 2, "sge": 2, "sgt": 2, "sle": 2, "slt": 2, "width": [2, 5], "available_extern": 2, "common": 2, "external_weak": 2, "intern": 2, "link_once_ani": 2, "link_once_odr": 2, "privat": 2, "weak_ani": 2, "weak_odr": 2, "collect": 2, "bitcod": 2, "byte": 2, "from_bitcod": [2, 5], "from_ir": [2, 5], "ir": 2, "declar": 2, "source_filenam": [2, 5], "origin": 2, "sourc": [2, 4, 5], "wa": [2, 5], "verifi": 2, "valid": 2, "error": 2, "descript": 2, "invalid": 2, "addr_space_cast": 2, "alloca": 2, "AND": 2, "ashr": 2, "atomic_cmp_xchg": 2, "atomic_rmw": 2, "bit_cast": 2, "call_br": 2, "catch_pad": 2, "catch_ret": 2, "catch_switch": 2, "cleanup_pad": 2, "cleanup_ret": 2, "extract_el": 2, "extract_valu": 2, "fadd": 2, "fdiv": 2, "fenc": 2, "fmul": 2, "fneg": 2, "fp_ext": 2, "fp_to_si": 2, "fp_to_ui": 2, "fp_trunc": 2, "freez": 2, "frem": 2, "fsub": 2, "get_element_ptr": 2, "indirect_br": 2, "insert_el": 2, "insert_valu": 2, "int_to_ptr": 2, "invok": 2, "landing_pad": 2, "load": 2, "OR": 2, "ptr_to_int": 2, "resum": 2, "sdiv": 2, "select": 2, "sext": 2, "shuffle_vector": 2, "si_to_fp": 2, "srem": 2, "store": 2, "trunc": 2, "udiv": 2, "ui_to_fp": 2, "unreach": 2, "urem": 2, "user_op_1": 2, "user_op_2": 2, "va_arg": 2, "zext": 2, "node": 2, "incom": 2, "preced": 2, "tupl": 2, "pointer": 2, "pointe": 2, "address_spac": 2, "address": 2, "space": 2, "num_qubit": [2, 5], "num_result": [2, 5], "simpl": 2, "follow": [2, 3, 5], "assumpt": 2, "all": [2, 3, 5], "alloc": 2, "There": [2, 3, 4, 5], "exactli": 2, "link": [2, 3, 5], "add_byte_str": 2, "add_external_funct": 2, "emit": 2, "properti": [2, 5], "plain": 2, "text": 2, "index": 2, "numer": 2, "id": 2, "structur": 2, "field": 2, "anonym": 2, "case": [2, 5], "default": [2, 3], "match": 2, "doubl": [2, 5], "is_doubl": 2, "is_void": 2, "extract": [2, 5], "interop": 2, "friendli": 2, "rust": 3, "1": [3, 5], "59": 3, "3": [3, 4], "7": [3, 4], "powershel": 3, "core": 3, "13": 3, "0": 3, "see": [3, 5], "cmake": 3, "10": [3, 4], "either": 3, "highli": 3, "recommend": 3, "sccach": 3, "ccach": 3, "lib": 3, "sudo": 3, "apt": 3, "python3": 3, "dev": 3, "pip": [3, 4], "user": 3, "u": 3, "maturin": 3, "rustup": 3, "make": [3, 4, 5], "sure": 3, "ad": 3, "miniconda": 3, "org": 3, "In": [3, 5], "command": 3, "prompt": 3, "brew": 3, "9": [3, 4], "you": [3, 4, 5], "manual": 3, "22": [3, 4], "04": [3, 4], "updat": 3, "lldb": 3, "lld": 3, "11": [3, 4], "clangd": 3, "tidi": 3, "essenti": 3, "download": 3, "win64": 3, "ex": 3, "releas": 3, "page": 3, "onli": [3, 5], "compon": 3, "preinstal": 3, "script": 3, "automat": 3, "toolchain": 3, "detail": 3, "section": 3, "version": [3, 5], "To": [3, 5], "initi": 3, "your": 3, "solut": 3, "ps1": 3, "qirlib": 3, "depend": 3, "appropri": 3, "below": 3, "instead": [3, 4, 5], "wai": [3, 5], "chang": [3, 5], "within": 3, "project": 3, "folder": 3, "specif": 3, "For": [3, 5], "via": 3, "featur": 3, "thei": [3, 5], "cargo": 3, "extra": 3, "placehold": 3, "llvm11": 3, "llvm12": 3, "llvm13": 3, "llvm14": 3, "crate": 3, "pass": [3, 5], "help": 3, "view": [3, 5], "more": [3, 5], "current": 3, "virtualenv": 3, "pytest": 3, "test": [3, 5], "do": [3, 5], "wish": 3, "wheel": 3, "cdylib": 3, "mode": 3, "those": 3, "consum": 3, "refer": [3, 5], "readm": 3, "constraint": 3, "appli": 3, "alreadi": 3, "prior": 3, "look": [3, 5], "locat": 3, "specifi": 3, "allow": 3, "afterward": 3, "configur": 3, "llvm_sys_": 3, "_prefix": 3, "accord": 3, "what": [3, 5], "rest": 3, "abi": 3, "manylinux": 3, "support": [3, 5], "docker": 3, "imag": 3, "ci": 3, "easi": 4, "work": 4, "intermedi": 4, "represent": 4, "pars": [4, 5], "new": [4, 5], "ones": 4, "also": [4, 5], "64": 4, "x86": 4, "newer": 4, "two": [4, 5], "guarante": 4, "we": 4, "publish": 4, "offici": 4, "binari": 4, "them": 4, "like": 4, "compat": 4, "built": 4, "ubuntu": 4, "20": 4, "debian": 4, "maco": 4, "window": 4, "server": 4, "2019": 4, "12": 4, "15": 4, "6": 5, "last": 5, "three": 5, "metapackag": 5, "singl": 5, "previou": 5, "import": 5, "same": 5, "equival": 5, "api": 5, "avail": 5, "still": 5, "under": 5, "bitcode_to_ir": 5, "ir_to_bitcod": 5, "were": 5, "becaus": 5, "both": 5, "module_nam": 5, "Or": 5, "filenam": 5, "describ": 5, "been": 5, "yourself": 5, "But": 5, "give": 5, "unifi": 5, "code": 5, "design": 5, "much": 5, "power": 5, "enabl": 5, "workflow": 5, "involv": 5, "inspect": 5, "otherwis": 5, "transform": 5, "mean": 5, "had": 5, "complet": 5, "redesign": 5, "unfortun": 5, "challeng": 5, "here": 5, "some": 5, "tip": 5, "qirmodul": 5, "constructor": 5, "entrypoint_func": 5, "interop_func": 5, "get_funcs_by_attr": 5, "filter": 5, "next": 5, "hierarchi": 5, "trim": 5, "down": 5, "significantli": 5, "subclass": 5, "qirinstr": 5, "surviv": 5, "other": 5, "possibl": 5, "anyth": 5, "previous": 5, "check": 5, "subset": 5, "just": 5, "flow": 5, "term": 5, "first": 5, "qirqubitconst": 5, "qirresultconst": 5, "qiroperand": 5, "try": 5, "isn": 5, "could": 5, "get_global_bytes_valu": 5, "how": 5, "take": 5, "test_pars": 5, "py": 5, "test_parser_api": 5, "old": 5}, "objects": {"": [[2, 0, 0, "-", "pyqir"]], "pyqir": [[2, 1, 1, "", "ArrayType"], [2, 1, 1, "", "Attribute"], [2, 1, 1, "", "BasicBlock"], [2, 1, 1, "", "BasicQisBuilder"], [2, 1, 1, "", "Builder"], [2, 1, 1, "", "Call"], [2, 1, 1, "", "Constant"], [2, 1, 1, "", "Context"], [2, 1, 1, "", "FCmp"], [2, 1, 1, "", "FloatConstant"], [2, 1, 1, "", "FloatPredicate"], [2, 1, 1, "", "Function"], [2, 1, 1, "", "FunctionType"], [2, 1, 1, "", "ICmp"], [2, 1, 1, "", "Instruction"], [2, 1, 1, "", "IntConstant"], [2, 1, 1, "", "IntPredicate"], [2, 1, 1, "", "IntType"], [2, 1, 1, "", "Linkage"], [2, 1, 1, "", "Module"], [2, 1, 1, "", "Opcode"], [2, 1, 1, "", "Phi"], [2, 1, 1, "", "PointerType"], [2, 1, 1, "", "SimpleModule"], [2, 1, 1, "", "StructType"], [2, 1, 1, "", "Switch"], [2, 1, 1, "", "Type"], [2, 1, 1, "", "Value"], [2, 5, 1, "", "const"], [2, 5, 1, "", "entry_point"], [0, 0, 0, "-", "evaluator"], [2, 5, 1, "", "extract_byte_string"], [2, 5, 1, "", "global_byte_string"], [2, 5, 1, "", "is_entry_point"], [2, 5, 1, "", "is_interop_friendly"], [2, 5, 1, "", "is_qubit_type"], [2, 5, 1, "", "is_result_type"], [2, 5, 1, "", "qubit"], [2, 5, 1, "", "qubit_id"], [2, 5, 1, "", "qubit_type"], [2, 5, 1, "", "required_num_qubits"], [2, 5, 1, "", "required_num_results"], [2, 5, 1, "", "result"], [2, 5, 1, "", "result_id"], [2, 5, 1, "", "result_type"]], "pyqir.ArrayType": [[2, 2, 1, "", "count"], [2, 2, 1, "", "element"]], "pyqir.Attribute": [[2, 2, 1, "", "value"]], "pyqir.BasicBlock": [[2, 2, 1, "", "instructions"], [2, 2, 1, "", "terminator"]], "pyqir.BasicQisBuilder": [[2, 3, 1, "", "cx"], [2, 3, 1, "", "cz"], [2, 3, 1, "", "h"], [2, 3, 1, "", "if_result"], [2, 3, 1, "", "mz"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "rx"], [2, 3, 1, "", "ry"], [2, 3, 1, "", "rz"], [2, 3, 1, "", "s"], [2, 3, 1, "", "s_adj"], [2, 3, 1, "", "t"], [2, 3, 1, "", "t_adj"], [2, 3, 1, "", "x"], [2, 3, 1, "", "y"], [2, 3, 1, "", "z"]], "pyqir.Builder": [[2, 3, 1, "", "add"], [2, 3, 1, "", "and_"], [2, 3, 1, "", "br"], [2, 3, 1, "", "call"], [2, 3, 1, "", "icmp"], [2, 3, 1, "", "if_"], [2, 3, 1, "", "insert_at_end"], [2, 3, 1, "", "lshr"], [2, 3, 1, "", "mul"], [2, 3, 1, "", "or_"], [2, 3, 1, "", "ret"], [2, 3, 1, "", "shl"], [2, 3, 1, "", "sub"], [2, 3, 1, "", "xor"]], "pyqir.Call": [[2, 2, 1, "", "args"], [2, 2, 1, "", "callee"]], "pyqir.Constant": [[2, 2, 1, "", "is_null"], [2, 3, 1, "", "null"]], "pyqir.FCmp": [[2, 2, 1, "", "predicate"]], "pyqir.FloatConstant": [[2, 2, 1, "", "value"]], "pyqir.FloatPredicate": [[2, 2, 1, "", "FALSE"], [2, 2, 1, "", "OEQ"], [2, 2, 1, "", "OGE"], [2, 2, 1, "", "OGT"], [2, 2, 1, "", "OLE"], [2, 2, 1, "", "OLT"], [2, 2, 1, "", "ONE"], [2, 2, 1, "", "ORD"], [2, 2, 1, "", "TRUE"], [2, 2, 1, "", "UEQ"], [2, 2, 1, "", "UGE"], [2, 2, 1, "", "UGT"], [2, 2, 1, "", "ULE"], [2, 2, 1, "", "ULT"], [2, 2, 1, "", "UNE"], [2, 2, 1, "", "UNO"]], "pyqir.Function": [[2, 3, 1, "", "attribute"], [2, 2, 1, "", "basic_blocks"], [2, 2, 1, "", "params"]], "pyqir.FunctionType": [[2, 2, 1, "", "params"], [2, 2, 1, "", "ret"]], "pyqir.ICmp": [[2, 2, 1, "", "predicate"]], "pyqir.Instruction": [[2, 3, 1, "", "erase"], [2, 2, 1, "", "opcode"], [2, 2, 1, "", "operands"], [2, 2, 1, "", "successors"]], "pyqir.IntConstant": [[2, 2, 1, "", "value"]], "pyqir.IntPredicate": [[2, 2, 1, "", "EQ"], [2, 2, 1, "", "NE"], [2, 2, 1, "", "SGE"], [2, 2, 1, "", "SGT"], [2, 2, 1, "", "SLE"], [2, 2, 1, "", "SLT"], [2, 2, 1, "", "UGE"], [2, 2, 1, "", "UGT"], [2, 2, 1, "", "ULE"], [2, 2, 1, "", "ULT"]], "pyqir.IntType": [[2, 2, 1, "", "width"]], "pyqir.Linkage": [[2, 2, 1, "", "APPENDING"], [2, 2, 1, "", "AVAILABLE_EXTERNALLY"], [2, 2, 1, "", "COMMON"], [2, 2, 1, "", "EXTERNAL"], [2, 2, 1, "", "EXTERNAL_WEAK"], [2, 2, 1, "", "INTERNAL"], [2, 2, 1, "", "LINK_ONCE_ANY"], [2, 2, 1, "", "LINK_ONCE_ODR"], [2, 2, 1, "", "PRIVATE"], [2, 2, 1, "", "WEAK_ANY"], [2, 2, 1, "", "WEAK_ODR"]], "pyqir.Module": [[2, 2, 1, "", "bitcode"], [2, 2, 1, "", "context"], [2, 3, 1, "", "from_bitcode"], [2, 3, 1, "", "from_ir"], [2, 2, 1, "", "functions"], [2, 2, 1, "", "source_filename"], [2, 3, 1, "", "verify"]], "pyqir.Opcode": [[2, 2, 1, "", "ADD"], [2, 2, 1, "", "ADDR_SPACE_CAST"], [2, 2, 1, "", "ALLOCA"], [2, 2, 1, "", "AND"], [2, 2, 1, "", "ASHR"], [2, 2, 1, "", "ATOMIC_CMP_XCHG"], [2, 2, 1, "", "ATOMIC_RMW"], [2, 2, 1, "", "BIT_CAST"], [2, 2, 1, "", "BR"], [2, 2, 1, "", "CALL"], [2, 2, 1, "", "CALL_BR"], [2, 2, 1, "", "CATCH_PAD"], [2, 2, 1, "", "CATCH_RET"], [2, 2, 1, "", "CATCH_SWITCH"], [2, 2, 1, "", "CLEANUP_PAD"], [2, 2, 1, "", "CLEANUP_RET"], [2, 2, 1, "", "EXTRACT_ELEMENT"], [2, 2, 1, "", "EXTRACT_VALUE"], [2, 2, 1, "", "FADD"], [2, 2, 1, "", "FCMP"], [2, 2, 1, "", "FDIV"], [2, 2, 1, "", "FENCE"], [2, 2, 1, "", "FMUL"], [2, 2, 1, "", "FNEG"], [2, 2, 1, "", "FP_EXT"], [2, 2, 1, "", "FP_TO_SI"], [2, 2, 1, "", "FP_TO_UI"], [2, 2, 1, "", "FP_TRUNC"], [2, 2, 1, "", "FREEZE"], [2, 2, 1, "", "FREM"], [2, 2, 1, "", "FSUB"], [2, 2, 1, "", "GET_ELEMENT_PTR"], [2, 2, 1, "", "ICMP"], [2, 2, 1, "", "INDIRECT_BR"], [2, 2, 1, "", "INSERT_ELEMENT"], [2, 2, 1, "", "INSERT_VALUE"], [2, 2, 1, "", "INT_TO_PTR"], [2, 2, 1, "", "INVOKE"], [2, 2, 1, "", "LANDING_PAD"], [2, 2, 1, "", "LOAD"], [2, 2, 1, "", "LSHR"], [2, 2, 1, "", "MUL"], [2, 2, 1, "", "OR"], [2, 2, 1, "", "PHI"], [2, 2, 1, "", "PTR_TO_INT"], [2, 2, 1, "", "RESUME"], [2, 2, 1, "", "RET"], [2, 2, 1, "", "SDIV"], [2, 2, 1, "", "SELECT"], [2, 2, 1, "", "SEXT"], [2, 2, 1, "", "SHL"], [2, 2, 1, "", "SHUFFLE_VECTOR"], [2, 2, 1, "", "SI_TO_FP"], [2, 2, 1, "", "SREM"], [2, 2, 1, "", "STORE"], [2, 2, 1, "", "SUB"], [2, 2, 1, "", "SWITCH"], [2, 2, 1, "", "TRUNC"], [2, 2, 1, "", "UDIV"], [2, 2, 1, "", "UI_TO_FP"], [2, 2, 1, "", "UNREACHABLE"], [2, 2, 1, "", "UREM"], [2, 2, 1, "", "USER_OP_1"], [2, 2, 1, "", "USER_OP_2"], [2, 2, 1, "", "VA_ARG"], [2, 2, 1, "", "XOR"], [2, 2, 1, "", "ZEXT"]], "pyqir.Phi": [[2, 2, 1, "", "incoming"]], "pyqir.PointerType": [[2, 2, 1, "", "address_space"], [2, 2, 1, "", "pointee"]], "pyqir.SimpleModule": [[2, 3, 1, "", "add_byte_string"], [2, 3, 1, "", "add_external_function"], [2, 3, 1, "", "bitcode"], [2, 4, 1, "", "builder"], [2, 4, 1, "", "context"], [2, 3, 1, "", "ir"], [2, 4, 1, "", "qubits"], [2, 4, 1, "", "results"]], "pyqir.StructType": [[2, 2, 1, "", "fields"], [2, 2, 1, "", "name"]], "pyqir.Switch": [[2, 2, 1, "", "cases"], [2, 2, 1, "", "cond"], [2, 2, 1, "", "default"]], "pyqir.Type": [[2, 3, 1, "", "double"], [2, 2, 1, "", "is_double"], [2, 2, 1, "", "is_void"], [2, 3, 1, "", "void"]], "pyqir.Value": [[2, 2, 1, "", "name"], [2, 2, 1, "", "type"]], "pyqir.evaluator": [[0, 1, 1, "", "GateLogger"], [0, 1, 1, "", "GateSet"], [0, 1, 1, "", "NonadaptiveEvaluator"]], "pyqir.evaluator.GateLogger": [[0, 3, 1, "", "cx"], [0, 3, 1, "", "cz"], [0, 3, 1, "", "finish"], [0, 3, 1, "", "h"], [0, 2, 1, "", "instructions"], [0, 3, 1, "", "m"], [0, 3, 1, "", "mz"], [0, 2, 1, "", "number_of_qubits"], [0, 2, 1, "", "number_of_registers"], [0, 3, 1, "", "print"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "rx"], [0, 3, 1, "", "ry"], [0, 3, 1, "", "rz"], [0, 3, 1, "", "s"], [0, 3, 1, "", "s_adj"], [0, 3, 1, "", "t"], [0, 3, 1, "", "t_adj"], [0, 3, 1, "", "x"], [0, 3, 1, "", "y"], [0, 3, 1, "", "z"]], "pyqir.evaluator.GateSet": [[0, 3, 1, "", "cx"], [0, 3, 1, "", "cz"], [0, 3, 1, "", "finish"], [0, 3, 1, "", "h"], [0, 3, 1, "", "m"], [0, 3, 1, "", "mz"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "rx"], [0, 3, 1, "", "ry"], [0, 3, 1, "", "rz"], [0, 3, 1, "", "s"], [0, 3, 1, "", "s_adj"], [0, 3, 1, "", "t"], [0, 3, 1, "", "t_adj"], [0, 3, 1, "", "x"], [0, 3, 1, "", "y"], [0, 3, 1, "", "z"]], "pyqir.evaluator.NonadaptiveEvaluator": [[0, 3, 1, "", "eval"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"pyqir": [0, 2, 4, 5], "evalu": 0, "api": 1, "refer": 1, "build": 3, "from": 3, "sourc": 3, "local": 3, "environ": 3, "requir": 3, "option": 3, "linux": 3, "ubuntu": 3, "window": 3, "maco": 3, "instal": [3, 4], "clang": 3, "ninja": 3, "llvm": 3, "develop": 3, "variabl": 3, "packag": [3, 5], "support": 4, "system": 4, "tier": 4, "1": 4, "2": 4, "upgrad": 5, "0": 5, "7": 5, "gener": 5, "ir": 5, "bitcod": 5, "convers": 5, "type": 5, "parser": 5, "modul": 5, "entri": 5, "point": 5, "interop": 5, "friendli": 5, "function": 5, "instruct": 5, "qubit": 5, "result": 5, "id": 5, "string": 5, "exampl": 5}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"pyqir.evaluator": [[0, "module-pyqir.evaluator"]], "API Reference": [[1, "api-reference"]], "pyqir": [[2, "module-pyqir"]], "Building from Source": [[3, "building-from-source"]], "Local Environment": [[3, "local-environment"]], "Requirements": [[3, "requirements"]], "Optional": [[3, "optional"]], "Linux (Ubuntu)": [[3, "linux-ubuntu"]], "Windows": [[3, "windows"]], "MacOS": [[3, "macos"]], "Installing Clang and Ninja": [[3, "installing-clang-and-ninja"]], "Installing LLVM": [[3, "installing-llvm"]], "Development": [[3, "development"]], "Environment Variables": [[3, "environment-variables"]], "Packaging": [[3, "packaging"]], "PyQIR": [[4, "pyqir"]], "Installation": [[4, "installation"]], "Supported Systems": [[4, "supported-systems"]], "Tier 1": [[4, "tier-1"]], "Tier 2": [[4, "tier-2"]], "Upgrading to PyQIR 0.7": [[5, "upgrading-to-pyqir-0-7"]], "Packages": [[5, "packages"]], "Generator": [[5, "generator"]], "IR and bitcode conversion": [[5, "ir-and-bitcode-conversion"]], "Types": [[5, "types"]], "Parser": [[5, "parser"]], "Modules": [[5, "modules"]], "Entry points and interop-friendly functions": [[5, "entry-points-and-interop-friendly-functions"]], "Instructions": [[5, "instructions"]], "Qubit and result IDs": [[5, "qubit-and-result-ids"]], "Strings": [[5, "strings"]], "Examples": [[5, "examples"]]}, "indexentries": {"gatelogger (class in pyqir.evaluator)": [[0, "pyqir.evaluator.GateLogger"]], "gateset (class in pyqir.evaluator)": [[0, "pyqir.evaluator.GateSet"]], "nonadaptiveevaluator (class in pyqir.evaluator)": [[0, "pyqir.evaluator.NonadaptiveEvaluator"]], "cx() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.cx"]], "cx() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.cx"]], "cz() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.cz"]], "cz() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.cz"]], "eval() (pyqir.evaluator.nonadaptiveevaluator method)": [[0, "pyqir.evaluator.NonadaptiveEvaluator.eval"]], "finish() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.finish"]], "finish() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.finish"]], "h() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.h"]], "h() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.h"]], "instructions (pyqir.evaluator.gatelogger attribute)": [[0, "pyqir.evaluator.GateLogger.instructions"]], "m() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.m"]], "m() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.m"]], "module": [[0, "module-pyqir.evaluator"], [2, "module-pyqir"]], "mz() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.mz"]], "mz() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.mz"]], "number_of_qubits (pyqir.evaluator.gatelogger attribute)": [[0, "pyqir.evaluator.GateLogger.number_of_qubits"]], "number_of_registers (pyqir.evaluator.gatelogger attribute)": [[0, "pyqir.evaluator.GateLogger.number_of_registers"]], "print() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.print"]], "pyqir.evaluator": [[0, "module-pyqir.evaluator"]], "reset() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.reset"]], "reset() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.reset"]], "rx() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.rx"]], "rx() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.rx"]], "ry() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.ry"]], "ry() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.ry"]], "rz() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.rz"]], "rz() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.rz"]], "s() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.s"]], "s() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.s"]], "s_adj() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.s_adj"]], "s_adj() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.s_adj"]], "t() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.t"]], "t() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.t"]], "t_adj() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.t_adj"]], "t_adj() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.t_adj"]], "x() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.x"]], "x() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.x"]], "y() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.y"]], "y() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.y"]], "z() (pyqir.evaluator.gatelogger method)": [[0, "pyqir.evaluator.GateLogger.z"]], "z() (pyqir.evaluator.gateset method)": [[0, "pyqir.evaluator.GateSet.z"]], "add (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ADD"]], "addr_space_cast (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ADDR_SPACE_CAST"]], "alloca (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ALLOCA"]], "and (pyqir.opcode attribute)": [[2, "pyqir.Opcode.AND"]], "appending (pyqir.linkage attribute)": [[2, "pyqir.Linkage.APPENDING"]], "ashr (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ASHR"]], "atomic_cmp_xchg (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ATOMIC_CMP_XCHG"]], "atomic_rmw (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ATOMIC_RMW"]], "available_externally (pyqir.linkage attribute)": [[2, "pyqir.Linkage.AVAILABLE_EXTERNALLY"]], "arraytype (class in pyqir)": [[2, "pyqir.ArrayType"]], "attribute (class in pyqir)": [[2, "pyqir.Attribute"]], "bit_cast (pyqir.opcode attribute)": [[2, "pyqir.Opcode.BIT_CAST"]], "br (pyqir.opcode attribute)": [[2, "pyqir.Opcode.BR"]], "basicblock (class in pyqir)": [[2, "pyqir.BasicBlock"]], "basicqisbuilder (class in pyqir)": [[2, "pyqir.BasicQisBuilder"]], "builder (class in pyqir)": [[2, "pyqir.Builder"]], "call (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CALL"]], "call_br (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CALL_BR"]], "catch_pad (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CATCH_PAD"]], "catch_ret (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CATCH_RET"]], "catch_switch (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CATCH_SWITCH"]], "cleanup_pad (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CLEANUP_PAD"]], "cleanup_ret (pyqir.opcode attribute)": [[2, "pyqir.Opcode.CLEANUP_RET"]], "common (pyqir.linkage attribute)": [[2, "pyqir.Linkage.COMMON"]], "call (class in pyqir)": [[2, "pyqir.Call"]], "constant (class in pyqir)": [[2, "pyqir.Constant"]], "context (class in pyqir)": [[2, "pyqir.Context"]], "eq (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.EQ"]], "external (pyqir.linkage attribute)": [[2, "pyqir.Linkage.EXTERNAL"]], "external_weak (pyqir.linkage attribute)": [[2, "pyqir.Linkage.EXTERNAL_WEAK"]], "extract_element (pyqir.opcode attribute)": [[2, "pyqir.Opcode.EXTRACT_ELEMENT"]], "extract_value (pyqir.opcode attribute)": [[2, "pyqir.Opcode.EXTRACT_VALUE"]], "fadd (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FADD"]], "false (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.FALSE"]], "fcmp (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FCMP"]], "fcmp (class in pyqir)": [[2, "pyqir.FCmp"]], "fdiv (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FDIV"]], "fence (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FENCE"]], "fmul (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FMUL"]], "fneg (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FNEG"]], "fp_ext (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FP_EXT"]], "fp_to_si (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FP_TO_SI"]], "fp_to_ui (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FP_TO_UI"]], "fp_trunc (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FP_TRUNC"]], "freeze (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FREEZE"]], "frem (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FREM"]], "fsub (pyqir.opcode attribute)": [[2, "pyqir.Opcode.FSUB"]], "floatconstant (class in pyqir)": [[2, "pyqir.FloatConstant"]], "floatpredicate (class in pyqir)": [[2, "pyqir.FloatPredicate"]], "function (class in pyqir)": [[2, "pyqir.Function"]], "functiontype (class in pyqir)": [[2, "pyqir.FunctionType"]], "get_element_ptr (pyqir.opcode attribute)": [[2, "pyqir.Opcode.GET_ELEMENT_PTR"]], "icmp (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ICMP"]], "icmp (class in pyqir)": [[2, "pyqir.ICmp"]], "indirect_br (pyqir.opcode attribute)": [[2, "pyqir.Opcode.INDIRECT_BR"]], "insert_element (pyqir.opcode attribute)": [[2, "pyqir.Opcode.INSERT_ELEMENT"]], "insert_value (pyqir.opcode attribute)": [[2, "pyqir.Opcode.INSERT_VALUE"]], "internal (pyqir.linkage attribute)": [[2, "pyqir.Linkage.INTERNAL"]], "int_to_ptr (pyqir.opcode attribute)": [[2, "pyqir.Opcode.INT_TO_PTR"]], "invoke (pyqir.opcode attribute)": [[2, "pyqir.Opcode.INVOKE"]], "instruction (class in pyqir)": [[2, "pyqir.Instruction"]], "intconstant (class in pyqir)": [[2, "pyqir.IntConstant"]], "intpredicate (class in pyqir)": [[2, "pyqir.IntPredicate"]], "inttype (class in pyqir)": [[2, "pyqir.IntType"]], "landing_pad (pyqir.opcode attribute)": [[2, "pyqir.Opcode.LANDING_PAD"]], "link_once_any (pyqir.linkage attribute)": [[2, "pyqir.Linkage.LINK_ONCE_ANY"]], "link_once_odr (pyqir.linkage attribute)": [[2, "pyqir.Linkage.LINK_ONCE_ODR"]], "load (pyqir.opcode attribute)": [[2, "pyqir.Opcode.LOAD"]], "lshr (pyqir.opcode attribute)": [[2, "pyqir.Opcode.LSHR"]], "linkage (class in pyqir)": [[2, "pyqir.Linkage"]], "mul (pyqir.opcode attribute)": [[2, "pyqir.Opcode.MUL"]], "module (class in pyqir)": [[2, "pyqir.Module"]], "ne (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.NE"]], "oeq (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.OEQ"]], "oge (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.OGE"]], "ogt (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.OGT"]], "ole (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.OLE"]], "olt (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.OLT"]], "one (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.ONE"]], "or (pyqir.opcode attribute)": [[2, "pyqir.Opcode.OR"]], "ord (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.ORD"]], "opcode (class in pyqir)": [[2, "pyqir.Opcode"]], "phi (pyqir.opcode attribute)": [[2, "pyqir.Opcode.PHI"]], "private (pyqir.linkage attribute)": [[2, "pyqir.Linkage.PRIVATE"]], "ptr_to_int (pyqir.opcode attribute)": [[2, "pyqir.Opcode.PTR_TO_INT"]], "phi (class in pyqir)": [[2, "pyqir.Phi"]], "pointertype (class in pyqir)": [[2, "pyqir.PointerType"]], "resume (pyqir.opcode attribute)": [[2, "pyqir.Opcode.RESUME"]], "ret (pyqir.opcode attribute)": [[2, "pyqir.Opcode.RET"]], "sdiv (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SDIV"]], "select (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SELECT"]], "sext (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SEXT"]], "sge (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.SGE"]], "sgt (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.SGT"]], "shl (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SHL"]], "shuffle_vector (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SHUFFLE_VECTOR"]], "si_to_fp (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SI_TO_FP"]], "sle (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.SLE"]], "slt (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.SLT"]], "srem (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SREM"]], "store (pyqir.opcode attribute)": [[2, "pyqir.Opcode.STORE"]], "sub (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SUB"]], "switch (pyqir.opcode attribute)": [[2, "pyqir.Opcode.SWITCH"]], "simplemodule (class in pyqir)": [[2, "pyqir.SimpleModule"]], "structtype (class in pyqir)": [[2, "pyqir.StructType"]], "switch (class in pyqir)": [[2, "pyqir.Switch"]], "true (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.TRUE"]], "trunc (pyqir.opcode attribute)": [[2, "pyqir.Opcode.TRUNC"]], "type (class in pyqir)": [[2, "pyqir.Type"]], "udiv (pyqir.opcode attribute)": [[2, "pyqir.Opcode.UDIV"]], "ueq (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.UEQ"]], "uge (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.UGE"]], "uge (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.UGE"]], "ugt (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.UGT"]], "ugt (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.UGT"]], "ui_to_fp (pyqir.opcode attribute)": [[2, "pyqir.Opcode.UI_TO_FP"]], "ule (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.ULE"]], "ule (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.ULE"]], "ult (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.ULT"]], "ult (pyqir.intpredicate attribute)": [[2, "pyqir.IntPredicate.ULT"]], "une (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.UNE"]], "uno (pyqir.floatpredicate attribute)": [[2, "pyqir.FloatPredicate.UNO"]], "unreachable (pyqir.opcode attribute)": [[2, "pyqir.Opcode.UNREACHABLE"]], "urem (pyqir.opcode attribute)": [[2, "pyqir.Opcode.UREM"]], "user_op_1 (pyqir.opcode attribute)": [[2, "pyqir.Opcode.USER_OP_1"]], "user_op_2 (pyqir.opcode attribute)": [[2, "pyqir.Opcode.USER_OP_2"]], "va_arg (pyqir.opcode attribute)": [[2, "pyqir.Opcode.VA_ARG"]], "value (class in pyqir)": [[2, "pyqir.Value"]], "weak_any (pyqir.linkage attribute)": [[2, "pyqir.Linkage.WEAK_ANY"]], "weak_odr (pyqir.linkage attribute)": [[2, "pyqir.Linkage.WEAK_ODR"]], "xor (pyqir.opcode attribute)": [[2, "pyqir.Opcode.XOR"]], "zext (pyqir.opcode attribute)": [[2, "pyqir.Opcode.ZEXT"]], "add() (pyqir.builder method)": [[2, "pyqir.Builder.add"]], "add_byte_string() (pyqir.simplemodule method)": [[2, "pyqir.SimpleModule.add_byte_string"]], "add_external_function() (pyqir.simplemodule method)": [[2, "pyqir.SimpleModule.add_external_function"]], "address_space (pyqir.pointertype attribute)": [[2, "pyqir.PointerType.address_space"]], "and_() (pyqir.builder method)": [[2, "pyqir.Builder.and_"]], "args (pyqir.call attribute)": [[2, "pyqir.Call.args"]], "attribute() (pyqir.function method)": [[2, "pyqir.Function.attribute"]], "basic_blocks (pyqir.function attribute)": [[2, "pyqir.Function.basic_blocks"]], "bitcode (pyqir.module attribute)": [[2, "pyqir.Module.bitcode"]], "bitcode() (pyqir.simplemodule method)": [[2, "pyqir.SimpleModule.bitcode"]], "br() (pyqir.builder method)": [[2, "pyqir.Builder.br"]], "builder (pyqir.simplemodule property)": [[2, "pyqir.SimpleModule.builder"]], "call() (pyqir.builder method)": [[2, "pyqir.Builder.call"]], "callee (pyqir.call attribute)": [[2, "pyqir.Call.callee"]], "cases (pyqir.switch attribute)": [[2, "pyqir.Switch.cases"]], "cond (pyqir.switch attribute)": [[2, "pyqir.Switch.cond"]], "const() (in module pyqir)": [[2, "pyqir.const"]], "context (pyqir.module attribute)": [[2, "pyqir.Module.context"]], "context (pyqir.simplemodule property)": [[2, "pyqir.SimpleModule.context"]], "count (pyqir.arraytype attribute)": [[2, "pyqir.ArrayType.count"]], "cx() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.cx"]], "cz() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.cz"]], "default (pyqir.switch attribute)": [[2, "pyqir.Switch.default"]], "double() (pyqir.type static method)": [[2, "pyqir.Type.double"]], "element (pyqir.arraytype attribute)": [[2, "pyqir.ArrayType.element"]], "entry_point() (in module pyqir)": [[2, "pyqir.entry_point"]], "erase() (pyqir.instruction method)": [[2, "pyqir.Instruction.erase"]], "extract_byte_string() (in module pyqir)": [[2, "pyqir.extract_byte_string"]], "fields (pyqir.structtype attribute)": [[2, "pyqir.StructType.fields"]], "from_bitcode() (pyqir.module static method)": [[2, "pyqir.Module.from_bitcode"]], "from_ir() (pyqir.module static method)": [[2, "pyqir.Module.from_ir"]], "functions (pyqir.module attribute)": [[2, "pyqir.Module.functions"]], "global_byte_string() (in module pyqir)": [[2, "pyqir.global_byte_string"]], "h() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.h"]], "icmp() (pyqir.builder method)": [[2, "pyqir.Builder.icmp"]], "if_() (pyqir.builder method)": [[2, "pyqir.Builder.if_"]], "if_result() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.if_result"]], "incoming (pyqir.phi attribute)": [[2, "pyqir.Phi.incoming"]], "insert_at_end() (pyqir.builder method)": [[2, "pyqir.Builder.insert_at_end"]], "instructions (pyqir.basicblock attribute)": [[2, "pyqir.BasicBlock.instructions"]], "ir() (pyqir.simplemodule method)": [[2, "pyqir.SimpleModule.ir"]], "is_double (pyqir.type attribute)": [[2, "pyqir.Type.is_double"]], "is_entry_point() (in module pyqir)": [[2, "pyqir.is_entry_point"]], "is_interop_friendly() (in module pyqir)": [[2, "pyqir.is_interop_friendly"]], "is_null (pyqir.constant attribute)": [[2, "pyqir.Constant.is_null"]], "is_qubit_type() (in module pyqir)": [[2, "pyqir.is_qubit_type"]], "is_result_type() (in module pyqir)": [[2, "pyqir.is_result_type"]], "is_void (pyqir.type attribute)": [[2, "pyqir.Type.is_void"]], "lshr() (pyqir.builder method)": [[2, "pyqir.Builder.lshr"]], "mul() (pyqir.builder method)": [[2, "pyqir.Builder.mul"]], "mz() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.mz"]], "name (pyqir.structtype attribute)": [[2, "pyqir.StructType.name"]], "name (pyqir.value attribute)": [[2, "pyqir.Value.name"]], "null() (pyqir.constant static method)": [[2, "pyqir.Constant.null"]], "opcode (pyqir.instruction attribute)": [[2, "pyqir.Instruction.opcode"]], "operands (pyqir.instruction attribute)": [[2, "pyqir.Instruction.operands"]], "or_() (pyqir.builder method)": [[2, "pyqir.Builder.or_"]], "params (pyqir.function attribute)": [[2, "pyqir.Function.params"]], "params (pyqir.functiontype attribute)": [[2, "pyqir.FunctionType.params"]], "pointee (pyqir.pointertype attribute)": [[2, "pyqir.PointerType.pointee"]], "predicate (pyqir.fcmp attribute)": [[2, "pyqir.FCmp.predicate"]], "predicate (pyqir.icmp attribute)": [[2, "pyqir.ICmp.predicate"]], "pyqir": [[2, "module-pyqir"]], "qubit() (in module pyqir)": [[2, "pyqir.qubit"]], "qubit_id() (in module pyqir)": [[2, "pyqir.qubit_id"]], "qubit_type() (in module pyqir)": [[2, "pyqir.qubit_type"]], "qubits (pyqir.simplemodule property)": [[2, "pyqir.SimpleModule.qubits"]], "required_num_qubits() (in module pyqir)": [[2, "pyqir.required_num_qubits"]], "required_num_results() (in module pyqir)": [[2, "pyqir.required_num_results"]], "reset() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.reset"]], "result() (in module pyqir)": [[2, "pyqir.result"]], "result_id() (in module pyqir)": [[2, "pyqir.result_id"]], "result_type() (in module pyqir)": [[2, "pyqir.result_type"]], "results (pyqir.simplemodule property)": [[2, "pyqir.SimpleModule.results"]], "ret (pyqir.functiontype attribute)": [[2, "pyqir.FunctionType.ret"]], "ret() (pyqir.builder method)": [[2, "pyqir.Builder.ret"]], "rx() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.rx"]], "ry() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.ry"]], "rz() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.rz"]], "s() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.s"]], "s_adj() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.s_adj"]], "shl() (pyqir.builder method)": [[2, "pyqir.Builder.shl"]], "source_filename (pyqir.module attribute)": [[2, "pyqir.Module.source_filename"]], "sub() (pyqir.builder method)": [[2, "pyqir.Builder.sub"]], "successors (pyqir.instruction attribute)": [[2, "pyqir.Instruction.successors"]], "t() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.t"]], "t_adj() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.t_adj"]], "terminator (pyqir.basicblock attribute)": [[2, "pyqir.BasicBlock.terminator"]], "type (pyqir.value attribute)": [[2, "pyqir.Value.type"]], "value (pyqir.attribute attribute)": [[2, "pyqir.Attribute.value"]], "value (pyqir.floatconstant attribute)": [[2, "pyqir.FloatConstant.value"]], "value (pyqir.intconstant attribute)": [[2, "pyqir.IntConstant.value"]], "verify() (pyqir.module method)": [[2, "pyqir.Module.verify"]], "void() (pyqir.type static method)": [[2, "pyqir.Type.void"]], "width (pyqir.inttype attribute)": [[2, "pyqir.IntType.width"]], "x() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.x"]], "xor() (pyqir.builder method)": [[2, "pyqir.Builder.xor"]], "y() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.y"]], "z() (pyqir.basicqisbuilder method)": [[2, "pyqir.BasicQisBuilder.z"]]}})