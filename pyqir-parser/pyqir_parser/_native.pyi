# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

from typing import List, Optional, Tuple

class PyQirModule:
    @property
    def functions(self) -> List[PyQirFunction]: ...
    def get_func_by_name(self, name: str) -> Optional[PyQirFunction]: ...
    def get_funcs_by_attr(self, attr: str) -> List[PyQirFunction]: ...
    def get_entrypoint_funcs(self) -> List[PyQirFunction]: ...
    def get_interop_funcs(self) -> List[PyQirFunction]: ...

class PyQirFunction:
    @property
    def name(self) -> str: ...
    @property
    def parameters(self) -> List[PyQirParameter]: ...
    @property
    def return_type(self) -> PyQirType: ...
    @property
    def blocks(self) -> List[PyQirBasicBlock]: ...
    @property
    def required_qubits(self) -> Optional[int]: ...
    @property
    def required_results(self) -> Optional[int]: ...
    def get_attribute_value(self, attr_name: str) -> Optional[str]: ...
    def get_block_by_name(self, name: str) -> Optional[PyQirBasicBlock]: ...
    def get_instruction_by_output_name(
        self, name: str
    ) -> Optional[PyQirInstruction]: ...

class PyQirParameter:
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> PyQirType: ...

class PyQirBasicBlock:
    @property
    def name(self) -> str: ...
    @property
    def instructions(self) -> List[PyQirInstruction]: ...
    @property
    def phi_nodes(self) -> List[PyQirInstruction]: ...
    def get_phi_pairs_by_source_name(
        self, name: str
    ) -> List[Tuple[str, PyQirOperand]]: ...
    @property
    def terminator(self) -> PyQirTerminator: ...

class PyQirInstruction:
    @property
    def target_operands(self) -> List[PyQirOperand]: ...
    @property
    def type(self) -> PyQirType: ...
    @property
    def is_add(self) -> bool: ...
    @property
    def is_sub(self) -> bool: ...
    @property
    def is_mul(self) -> bool: ...
    @property
    def is_udiv(self) -> bool: ...
    @property
    def is_sdiv(self) -> bool: ...
    @property
    def is_urem(self) -> bool: ...
    @property
    def is_srem(self) -> bool: ...
    @property
    def is_and(self) -> bool: ...
    @property
    def is_or(self) -> bool: ...
    @property
    def is_xor(self) -> bool: ...
    @property
    def is_shl(self) -> bool: ...
    @property
    def is_lshr(self) -> bool: ...
    @property
    def is_ashr(self) -> bool: ...
    @property
    def is_fadd(self) -> bool: ...
    @property
    def is_fsub(self) -> bool: ...
    @property
    def is_fmul(self) -> bool: ...
    @property
    def is_fdiv(self) -> bool: ...
    @property
    def is_frem(self) -> bool: ...
    @property
    def is_fneg(self) -> bool: ...
    @property
    def is_zext(self) -> bool: ...
    @property
    def is_icmp(self) -> bool: ...
    @property
    def icmp_predicate(self) -> Optional[str]: ...
    @property
    def is_fcmp(self) -> bool: ...
    @property
    def fcmp_predicate(self) -> Optional[str]: ...
    @property
    def is_phi(self) -> bool: ...
    @property
    def phi_incoming_values(self) -> Optional[List[Tuple[PyQirOperand, str]]]: ...
    def get_phi_incoming_value_for_name(self, name: str) -> Optional[PyQirOperand]: ...
    @property
    def is_select(self) -> bool: ...
    @property
    def select_condition(self) -> Optional[PyQirOperand]: ...
    @property
    def select_true_value(self) -> Optional[PyQirOperand]: ...
    @property
    def select_false_value(self) -> Optional[PyQirOperand]: ...
    @property
    def is_call(self) -> bool: ...
    @property
    def call_func_name(self) -> Optional[str]: ...
    @property
    def call_func_params(self) -> Optional[List[PyQirOperand]]: ...
    @property
    def is_qis_call(self) -> bool: ...
    @property
    def is_rt_call(self) -> bool: ...
    @property
    def is_qir_call(self) -> bool: ...
    @property
    def has_output(self) -> bool: ...
    @property
    def output_name(self) -> Optional[str]: ...

class PyQirTerminator:
    @property
    def is_ret(self) -> bool: ...
    @property
    def ret_operand(self) -> Optional[PyQirOperand]: ...
    @property
    def is_br(self) -> bool: ...
    @property
    def br_dest(self) -> Optional[str]: ...
    @property
    def is_condbr(self) -> bool: ...
    @property
    def condbr_condition(self) -> Optional[PyQirOperand]: ...
    @property
    def condbr_true_dest(self) -> Optional[str]: ...
    @property
    def condbr_false_dest(self) -> Optional[str]: ...
    @property
    def is_switch(self) -> bool: ...
    @property
    def switch_operand(self) -> Optional[PyQirOperand]: ...
    @property
    def switch_dests(self) -> Optional[List[Tuple[PyQirOperand, str]]]: ...
    @property
    def switch_default_dest(self) -> Optional[str]: ...
    @property
    def is_unreachable(self) -> bool: ...

class PyQirOperand:
    @property
    def is_local(self) -> bool: ...
    @property
    def local_name(self) -> Optional[str]: ...
    @property
    def local_type(self) -> Optional[PyQirType]: ...
    @property
    def is_constant(self) -> bool: ...
    @property
    def constant(self) -> Optional[PyQirConstant]: ...

class PyQirConstant:
    @property
    def is_int(self) -> bool: ...
    @property
    def int_value(self) -> Optional[int]: ...
    @property
    def int_width(self) -> Optional[int]: ...
    @property
    def is_float(self) -> bool: ...
    @property
    def float_double_value(self) -> Optional[float]: ...
    @property
    def is_null(self) -> bool: ...
    @property
    def type(self) -> PyQirType: ...
    @property
    def is_qubit(self) -> bool: ...
    @property
    def qubit_static_id(self) -> Optional[int]: ...
    @property
    def is_result(self) -> bool: ...
    @property
    def result_static_id(self) -> Optional[int]: ...
    @property
    def is_global_byte_array(self) -> bool: ...
    def get_global_byte_array_value(self, module: PyQirModule) -> Optional[bytes]: ...

class PyQirType:
    @property
    def is_void(self) -> bool: ...
    @property
    def is_integer(self) -> bool: ...
    @property
    def integer_width(self) -> Optional[int]: ...
    @property
    def is_pointer(self) -> bool: ...
    @property
    def pointer_type(self) -> Optional[PyQirType]: ...
    @property
    def pointer_addrspace(self) -> Optional[int]: ...
    @property
    def is_double(self) -> bool: ...
    @property
    def is_array(self) -> bool: ...
    @property
    def array_element_type(self) -> Optional[PyQirType]: ...
    @property
    def array_num_elements(self) -> Optional[int]: ...
    @property
    def is_struct(self) -> bool: ...
    @property
    def struct_element_types(self) -> Optional[List[PyQirType]]: ...
    @property
    def is_named_struct(self) -> bool: ...
    @property
    def named_struct_name(self) -> Optional[str]: ...
    @property
    def is_qubit(self) -> bool: ...
    @property
    def is_result(self) -> bool: ...

def module_from_bitcode(bc_path: str) -> PyQirModule: ...
